// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  clipsClip: (where?: ClipsClipWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  clipsClip: (where: ClipsClipWhereUniqueInput) => ClipsClipNullablePromise;
  clipsClips: (args?: {
    where?: ClipsClipWhereInput;
    orderBy?: ClipsClipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClipsClip>;
  clipsClipsConnection: (args?: {
    where?: ClipsClipWhereInput;
    orderBy?: ClipsClipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClipsClipConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClipsClip: (data: ClipsClipCreateInput) => ClipsClipPromise;
  updateClipsClip: (args: {
    data: ClipsClipUpdateInput;
    where: ClipsClipWhereUniqueInput;
  }) => ClipsClipPromise;
  updateManyClipsClips: (args: {
    data: ClipsClipUpdateManyMutationInput;
    where?: ClipsClipWhereInput;
  }) => BatchPayloadPromise;
  upsertClipsClip: (args: {
    where: ClipsClipWhereUniqueInput;
    create: ClipsClipCreateInput;
    update: ClipsClipUpdateInput;
  }) => ClipsClipPromise;
  deleteClipsClip: (where: ClipsClipWhereUniqueInput) => ClipsClipPromise;
  deleteManyClipsClips: (where?: ClipsClipWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  clipsClip: (
    where?: ClipsClipSubscriptionWhereInput
  ) => ClipsClipSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ClipsClipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ClipsClipCreateInput {
  id?: Maybe<Int>;
  description: String;
  url: String;
}

export interface ClipsClipUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ClipsClipUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ClipsClipWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClipsClipWhereInput[] | ClipsClipWhereInput>;
  OR?: Maybe<ClipsClipWhereInput[] | ClipsClipWhereInput>;
  NOT?: Maybe<ClipsClipWhereInput[] | ClipsClipWhereInput>;
}

export interface ClipsClipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClipsClipWhereInput>;
  AND?: Maybe<
    ClipsClipSubscriptionWhereInput[] | ClipsClipSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClipsClipSubscriptionWhereInput[] | ClipsClipSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClipsClipSubscriptionWhereInput[] | ClipsClipSubscriptionWhereInput
  >;
}

export type ClipsClipWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ClipsClipPreviousValues {
  id: Int;
  description: String;
  url: String;
}

export interface ClipsClipPreviousValuesPromise
  extends Promise<ClipsClipPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ClipsClipPreviousValuesSubscription
  extends Promise<AsyncIterator<ClipsClipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateClipsClip {
  count: Int;
}

export interface AggregateClipsClipPromise
  extends Promise<AggregateClipsClip>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClipsClipSubscription
  extends Promise<AsyncIterator<AggregateClipsClip>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClipsClipSubscriptionPayload {
  mutation: MutationType;
  node: ClipsClip;
  updatedFields: String[];
  previousValues: ClipsClipPreviousValues;
}

export interface ClipsClipSubscriptionPayloadPromise
  extends Promise<ClipsClipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClipsClipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClipsClipPreviousValuesPromise>() => T;
}

export interface ClipsClipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClipsClipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClipsClipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClipsClipPreviousValuesSubscription>() => T;
}

export interface ClipsClip {
  id: Int;
  description: String;
  url: String;
}

export interface ClipsClipPromise extends Promise<ClipsClip>, Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ClipsClipSubscription
  extends Promise<AsyncIterator<ClipsClip>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ClipsClipNullablePromise
  extends Promise<ClipsClip | null>,
    Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ClipsClipConnection {
  pageInfo: PageInfo;
  edges: ClipsClipEdge[];
}

export interface ClipsClipConnectionPromise
  extends Promise<ClipsClipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClipsClipEdge>>() => T;
  aggregate: <T = AggregateClipsClipPromise>() => T;
}

export interface ClipsClipConnectionSubscription
  extends Promise<AsyncIterator<ClipsClipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClipsClipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClipsClipSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClipsClipEdge {
  node: ClipsClip;
  cursor: String;
}

export interface ClipsClipEdgePromise
  extends Promise<ClipsClipEdge>,
    Fragmentable {
  node: <T = ClipsClipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClipsClipEdgeSubscription
  extends Promise<AsyncIterator<ClipsClipEdge>>,
    Fragmentable {
  node: <T = ClipsClipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ClipsClip",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
